{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Rich Go language support for Visual Studio Code",
  "properties": {
    "go.addTags": {
      "additionalProperties": false,
      "default": {
        "options": "json=omitempty",
        "promptForTags": false,
        "tags": "json",
        "template": "",
        "transform": "snakecase"
      },
      "description": "Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.",
      "properties": {
        "options": {
          "default": "json=omitempty",
          "description": "Comma separated tag=options pairs to be used by Go: Add Tags command",
          "type": "string"
        },
        "promptForTags": {
          "default": false,
          "description": "If true, Go: Add Tags command will prompt the user to provide tags, options, transform values instead of using the configured values",
          "type": "boolean"
        },
        "tags": {
          "default": "json",
          "description": "Comma separated tags to be used by Go: Add Tags command",
          "type": "string"
        },
        "template": {
          "default": "",
          "description": "Custom format used by Go: Add Tags command for the tag value to be applied",
          "type": "string"
        },
        "transform": {
          "default": "snakecase",
          "description": "Transformation rule used by Go: Add Tags command to add tags",
          "enum": [
            "snakecase",
            "camelcase",
            "lispcase",
            "pascalcase",
            "keep"
          ],
          "type": "string"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.alternateTools": {
      "additionalProperties": true,
      "default": {},
      "description": "Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.",
      "properties": {
        "customFormatter": {
          "default": "",
          "markdownDescription": "Custom formatter to use instead of the language server. This should be used with the `custom` option in `#go.formatTool#`.",
          "type": "string"
        },
        "dlv": {
          "default": "dlv",
          "description": "Alternate tool to use instead of the dlv binary or alternate path to use for the dlv binary.",
          "type": "string"
        },
        "go": {
          "default": "go",
          "description": "Alternate tool to use instead of the go binary or alternate path to use for the go binary.",
          "type": "string"
        },
        "gopls": {
          "default": "gopls",
          "description": "Alternate tool to use instead of the gopls binary or alternate path to use for the gopls binary.",
          "type": "string"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.buildFlags": {
      "default": [],
      "description": "Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. [\"-ldflags='-s'\"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "go.buildOnSave": {
      "default": "package",
      "description": "Compiles code on file save using 'go build' or 'go test -c'. Not applicable when using the language server.",
      "enum": [
        "package",
        "workspace",
        "off"
      ],
      "markdownDeprecationMessage": "Enable the Go language server (`#go.useLanguageServer#`) to diagnose compile errors.",
      "scope": "resource",
      "type": "string"
    },
    "go.buildTags": {
      "default": "",
      "description": "The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.",
      "scope": "resource",
      "type": "string"
    },
    "go.coverMode": {
      "default": "default",
      "description": "When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.",
      "enum": [
        "default",
        "set",
        "count",
        "atomic"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.coverOnSave": {
      "default": false,
      "description": "If true, runs 'go test -coverprofile' on save and shows test coverage.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.coverOnSingleTest": {
      "default": false,
      "description": "If true, shows test coverage when Go: Test Function at cursor command is run.",
      "type": "boolean"
    },
    "go.coverOnSingleTestFile": {
      "default": false,
      "description": "If true, shows test coverage when Go: Test Single File command is run.",
      "type": "boolean"
    },
    "go.coverOnTestPackage": {
      "default": true,
      "description": "If true, shows test coverage when Go: Test Package command is run.",
      "type": "boolean"
    },
    "go.coverShowCounts": {
      "default": false,
      "description": "When generating code coverage, should counts be shown as --374--",
      "scope": "resource",
      "type": "boolean"
    },
    "go.coverageDecorator": {
      "additionalProperties": false,
      "default": {
        "coveredBorderColor": "rgba(64,128,128,0.5)",
        "coveredGutterStyle": "blockblue",
        "coveredHighlightColor": "rgba(64,128,128,0.5)",
        "type": "highlight",
        "uncoveredBorderColor": "rgba(128,64,64,0.25)",
        "uncoveredGutterStyle": "slashyellow",
        "uncoveredHighlightColor": "rgba(128,64,64,0.25)"
      },
      "description": "This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.",
      "properties": {
        "coveredBorderColor": {
          "description": "Color to use for the border of covered code.",
          "type": "string"
        },
        "coveredGutterStyle": {
          "description": "Gutter style to indicate covered code.",
          "enum": [
            "blockblue",
            "blockred",
            "blockgreen",
            "blockyellow",
            "slashred",
            "slashgreen",
            "slashblue",
            "slashyellow",
            "verticalred",
            "verticalgreen",
            "verticalblue",
            "verticalyellow"
          ],
          "type": "string"
        },
        "coveredHighlightColor": {
          "description": "Color in the rgba format to use to highlight covered code.",
          "type": "string"
        },
        "type": {
          "enum": [
            "highlight",
            "gutter"
          ],
          "type": "string"
        },
        "uncoveredBorderColor": {
          "description": "Color to use for the border of uncovered code.",
          "type": "string"
        },
        "uncoveredGutterStyle": {
          "description": "Gutter style to indicate covered code.",
          "enum": [
            "blockblue",
            "blockred",
            "blockgreen",
            "blockyellow",
            "slashred",
            "slashgreen",
            "slashblue",
            "slashyellow",
            "verticalred",
            "verticalgreen",
            "verticalblue",
            "verticalyellow"
          ],
          "type": "string"
        },
        "uncoveredHighlightColor": {
          "description": "Color in the rgba format to use to highlight uncovered code.",
          "type": "string"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.coverageOptions": {
      "default": "showBothCoveredAndUncoveredCode",
      "description": "Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage",
      "enum": [
        "showCoveredCodeOnly",
        "showUncoveredCodeOnly",
        "showBothCoveredAndUncoveredCode"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.delveConfig": {
      "default": {},
      "description": "Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.",
      "properties": {
        "apiVersion": {
          "default": 2,
          "description": "Delve Api Version to use. Default value is 2. This applies only when using the 'legacy' debug adapter.",
          "enum": [
            1,
            2
          ],
          "type": "number"
        },
        "debugAdapter": {
          "default": "dlv-dap",
          "description": "Select which debug adapter to use by default. This is also used for choosing which debug adapter to use when no launch.json is present and with codelenses.",
          "enum": [
            "legacy",
            "dlv-dap"
          ],
          "type": "string"
        },
        "dlvFlags": {
          "default": [],
          "description": "Extra flags for `dlv`. See `dlv help` for the full list of supported. Flags such as `--log-output`, `--log`, `--log-dest`, `--api-version`, `--output`, `--backend` already have corresponding properties in the debug configuration, and flags such as `--listen` and `--headless` are used internally. If they are specified in `dlvFlags`, they may be ignored or cause an error.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dlvLoadConfig": {
          "default": {
            "followPointers": true,
            "maxArrayValues": 64,
            "maxStringLen": 64,
            "maxStructFields": -1,
            "maxVariableRecurse": 1
          },
          "description": "LoadConfig describes to delve, how to load values from target's memory. Ignored by 'dlv-dap'.",
          "properties": {
            "followPointers": {
              "default": true,
              "description": "FollowPointers requests pointers to be automatically dereferenced",
              "type": "boolean"
            },
            "maxArrayValues": {
              "default": 64,
              "description": "MaxArrayValues is the maximum number of elements read from an array, a slice or a map",
              "type": "number"
            },
            "maxStringLen": {
              "default": 64,
              "description": "MaxStringLen is the maximum number of bytes read from a string",
              "type": "number"
            },
            "maxStructFields": {
              "default": -1,
              "description": "MaxStructFields is the maximum number of fields read from a struct, -1 will read all fields",
              "type": "number"
            },
            "maxVariableRecurse": {
              "default": 1,
              "description": "MaxVariableRecurse is how far to recurse when evaluating nested types",
              "type": "number"
            }
          },
          "type": "object"
        },
        "hideSystemGoroutines": {
          "default": false,
          "description": "Boolean value to indicate whether system goroutines should be hidden from call stack view.",
          "type": "boolean"
        },
        "logOutput": {
          "default": "debugger",
          "description": "Comma separated list of components that should produce debug output. Maps to dlv's `--log-output` flag. Check `dlv log` for details.",
          "enum": [
            "debugger",
            "gdbwire",
            "lldbout",
            "debuglineerr",
            "rpc",
            "dap"
          ],
          "type": "string"
        },
        "showGlobalVariables": {
          "default": false,
          "description": "Boolean value to indicate whether global package variables should be shown in the variables pane or not.",
          "type": "boolean"
        },
        "showLog": {
          "default": false,
          "description": "Show log output from the delve debugger. Maps to dlv's `--log` flag.",
          "type": "boolean"
        },
        "showRegisters": {
          "default": false,
          "description": "Boolean value to indicate whether register variables should be shown in the variables pane or not.",
          "type": "boolean"
        },
        "substitutePath": {
          "default": [],
          "description": "An array of mappings from a local path to the remote path that is used by the debuggee. The debug adapter will replace the local path with the remote path in all of the calls. Overriden by `remotePath` (in attach request).",
          "items": {
            "properties": {
              "from": {
                "default": "",
                "description": "The absolute local path to be replaced when passing paths to the debugger",
                "type": "string"
              },
              "to": {
                "default": "",
                "description": "The absolute remote path to be replaced when passing paths back to the client",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.diagnostic.vulncheck": {
      "default": "Off",
      "enum": [
        "Imports",
        "Off"
      ],
      "markdownDescription": "(Experimental) vulncheck enables vulnerability scanning.\n",
      "markdownEnumDescriptions": [
        "`\"Imports\"`: In Imports mode, `gopls` will report vulnerabilities that affect packages\ndirectly and indirectly used by the analyzed main module.\n",
        "`\"Off\"`: Disable vulnerability analysis.\n"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.disableConcurrentTests": {
      "default": false,
      "description": "If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.editorContextMenuCommands": {
      "additionalProperties": false,
      "default": {
        "addImport": true,
        "addTags": true,
        "benchmarkAtCursor": false,
        "debugTestAtCursor": true,
        "fillStruct": false,
        "generateTestForFile": false,
        "generateTestForFunction": true,
        "generateTestForPackage": false,
        "playground": true,
        "removeTags": false,
        "testAtCursor": true,
        "testCoverage": true,
        "testFile": false,
        "testPackage": false,
        "toggleTestFile": true
      },
      "description": "Experimental Feature: Enable/Disable entries from the context menu in the editor.",
      "properties": {
        "addImport": {
          "default": true,
          "description": "If true, adds command to import a package to the editor context menu",
          "type": "boolean"
        },
        "addTags": {
          "default": true,
          "description": "If true, adds command to add configured tags from struct fields to the editor context menu",
          "type": "boolean"
        },
        "benchmarkAtCursor": {
          "default": false,
          "description": "If true, adds command to benchmark the test under the cursor to the editor context menu",
          "type": "boolean"
        },
        "debugTestAtCursor": {
          "default": false,
          "description": "If true, adds command to debug the test under the cursor to the editor context menu",
          "type": "boolean"
        },
        "fillStruct": {
          "default": true,
          "description": "If true, adds command to fill struct literal with default values to the editor context menu",
          "type": "boolean"
        },
        "generateTestForFile": {
          "default": true,
          "description": "If true, adds command to generate unit tests for current file to the editor context menu",
          "type": "boolean"
        },
        "generateTestForFunction": {
          "default": true,
          "description": "If true, adds command to generate unit tests for function under the cursor to the editor context menu",
          "type": "boolean"
        },
        "generateTestForPackage": {
          "default": true,
          "description": "If true, adds command to generate unit tests for current package to the editor context menu",
          "type": "boolean"
        },
        "playground": {
          "default": true,
          "description": "If true, adds command to upload the current file or selection to the Go Playground",
          "type": "boolean"
        },
        "removeTags": {
          "default": true,
          "description": "If true, adds command to remove configured tags from struct fields to the editor context menu",
          "type": "boolean"
        },
        "testAtCursor": {
          "default": false,
          "description": "If true, adds command to run the test under the cursor to the editor context menu",
          "type": "boolean"
        },
        "testCoverage": {
          "default": true,
          "description": "If true, adds command to run test coverage to the editor context menu",
          "type": "boolean"
        },
        "testFile": {
          "default": true,
          "description": "If true, adds command to run all tests in the current file to the editor context menu",
          "type": "boolean"
        },
        "testPackage": {
          "default": true,
          "description": "If true, adds command to run all tests in the current package to the editor context menu",
          "type": "boolean"
        },
        "toggleTestFile": {
          "default": true,
          "description": "If true, adds command to toggle between a Go file and its test file to the editor context menu",
          "type": "boolean"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.enableCodeLens": {
      "additionalProperties": false,
      "default": {
        "runtest": true
      },
      "description": "Feature level setting to enable/disable code lens for references and run/debug tests",
      "properties": {
        "runtest": {
          "default": true,
          "description": "If true, enables code lens for running and debugging tests",
          "type": "boolean"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.formatFlags": {
      "default": [],
      "description": "Flags to pass to format tool (e.g. [\"-s\"]). Not applicable when using the language server.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "go.formatTool": {
      "default": "default",
      "enum": [
        "default",
        "gofmt",
        "goimports",
        "goformat",
        "gofumpt",
        "custom"
      ],
      "markdownDescription": "When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `#go.alternateTools#` section.",
      "markdownEnumDescriptions": [
        "If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.",
        "Formats the file according to the standard Go style. (not applicable when the language server is enabled)",
        "Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)",
        "Configurable gofmt, see https://github.com/mbenkmann/goformat.",
        "Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `#gopls.format.gofumpt#` instead)",
        "Formats using the custom tool specified as `customFormatter` in the `#go.alternateTools#` setting. The tool should take the input as STDIN and output the formatted code as STDOUT."
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.generateTestsFlags": {
      "default": [],
      "description": "Additional command line flags to pass to `gotests` for generating tests.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "go.gopath": {
      "default": null,
      "description": "Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.",
      "scope": "machine-overridable",
      "type": [
        "string",
        "null"
      ]
    },
    "go.goroot": {
      "default": null,
      "description": "Specifies the GOROOT to use when no environment variable is set.",
      "scope": "machine-overridable",
      "type": [
        "string",
        "null"
      ]
    },
    "go.inferGopath": {
      "default": false,
      "description": "Infer GOPATH from the workspace root. This is ignored when using Go Modules.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.inlayHints.assignVariableTypes": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for variable types in assign statements:\n```go\n\ti/* int*/, j/* int*/ := 0, len(r)-1\n```",
      "type": "boolean"
    },
    "go.inlayHints.compositeLiteralFields": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for composite literal field names:\n```go\n\t{/*in: */\"Hello, world\", /*want: */\"dlrow ,olleH\"}\n```",
      "type": "boolean"
    },
    "go.inlayHints.compositeLiteralTypes": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for composite literal types:\n```go\n\tfor _, c := range []struct {\n\t\tin, want string\n\t}{\n\t\t/*struct{ in string; want string }*/{\"Hello, world\", \"dlrow ,olleH\"},\n\t}\n```",
      "type": "boolean"
    },
    "go.inlayHints.constantValues": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for constant values:\n```go\n\tconst (\n\t\tKindNone   Kind = iota/* = 0*/\n\t\tKindPrint/*  = 1*/\n\t\tKindPrintf/* = 2*/\n\t\tKindErrorf/* = 3*/\n\t)\n```",
      "type": "boolean"
    },
    "go.inlayHints.functionTypeParameters": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for implicit type parameters on generic functions:\n```go\n\tmyFoo/*[int, string]*/(1, \"hello\")\n```",
      "type": "boolean"
    },
    "go.inlayHints.parameterNames": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for parameter names:\n```go\n\tparseInt(/* str: */ \"123\", /* radix: */ 8)\n```",
      "type": "boolean"
    },
    "go.inlayHints.rangeVariableTypes": {
      "default": false,
      "markdownDescription": "Enable/disable inlay hints for variable types in range statements:\n```go\n\tfor k/* int*/, v/* string*/ := range []string{} {\n\t\tfmt.Println(k, v)\n\t}\n```",
      "type": "boolean"
    },
    "go.installDependenciesWhenBuilding": {
      "default": false,
      "description": "If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.languageServerFlags": {
      "default": [],
      "description": "Flags like -rpc.trace and -logfile to be used while running the language server.",
      "type": "array"
    },
    "go.lintFlags": {
      "default": [],
      "description": "Flags to pass to Lint tool (e.g. [\"-min_confidence=.8\"])",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "go.lintOnSave": {
      "default": "package",
      "description": "Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.",
      "enum": [
        "file",
        "package",
        "workspace",
        "off"
      ],
      "enumDescriptions": [
        "lint the current file on file saving",
        "lint the current package on file saving",
        "lint all the packages in the current workspace root folder on file saving",
        "do not run lint automatically"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.lintTool": {
      "default": "staticcheck",
      "description": "Specifies Lint tool name.",
      "enum": [
        "staticcheck",
        "golint",
        "golangci-lint",
        "revive"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.logging.level": {
      "deprecationMessage": "This setting is deprecated. Use 'Developer: Set Log Level...' command to control logging level instead.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "go.playground": {
      "additionalProperties": false,
      "default": {
        "openbrowser": true,
        "run": true,
        "share": true
      },
      "description": "The flags configured here will be passed through to command `goplay`",
      "properties": {
        "openbrowser": {
          "default": true,
          "description": "Whether to open the created Go Playground in the default browser",
          "type": "boolean"
        },
        "run": {
          "default": true,
          "description": "Whether to run the created Go Playground after creation",
          "type": "boolean"
        },
        "share": {
          "default": true,
          "description": "Whether to make the created Go Playground shareable",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "go.removeTags": {
      "additionalProperties": false,
      "default": {
        "options": "",
        "promptForTags": false,
        "tags": ""
      },
      "description": "Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.",
      "properties": {
        "options": {
          "default": "json=omitempty",
          "description": "Comma separated tag=options pairs to be used by Go: Remove Tags command",
          "type": "string"
        },
        "promptForTags": {
          "default": false,
          "description": "If true, Go: Remove Tags command will prompt the user to provide tags and options instead of using the configured values",
          "type": "boolean"
        },
        "tags": {
          "default": "json",
          "description": "Comma separated tags to be used by Go: Remove Tags command",
          "type": "string"
        }
      },
      "scope": "resource",
      "type": "object"
    },
    "go.showWelcome": {
      "default": true,
      "description": "Specifies whether to show the Welcome experience on first install",
      "type": "boolean"
    },
    "go.survey.prompt": {
      "default": true,
      "description": "Prompt for surveys, including the gopls survey and the Go developer survey.",
      "type": "boolean"
    },
    "go.tasks.provideDefault": {
      "default": true,
      "description": "enable the default go build/test task provider.",
      "scope": "window",
      "type": "boolean"
    },
    "go.terminal.activateEnvironment": {
      "default": true,
      "description": "Apply the Go & PATH environment variables used by the extension to all integrated terminals.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.testEnvFile": {
      "default": null,
      "description": "Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.",
      "scope": "resource",
      "type": "string"
    },
    "go.testEnvVars": {
      "default": {},
      "description": "Environment variables that will be passed to the process that runs the Go tests",
      "scope": "resource",
      "type": "object"
    },
    "go.testExplorer.alwaysRunBenchmarks": {
      "default": false,
      "description": "Run benchmarks when running all tests in a file or folder.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.testExplorer.concatenateMessages": {
      "default": true,
      "description": "Concatenate all test log messages for a given location into a single message.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.testExplorer.enable": {
      "default": true,
      "description": "Enable the Go test explorer",
      "scope": "window",
      "type": "boolean"
    },
    "go.testExplorer.packageDisplayMode": {
      "default": "flat",
      "description": "Present packages in the test explorer flat or nested.",
      "enum": [
        "flat",
        "nested"
      ],
      "scope": "resource",
      "type": "string"
    },
    "go.testExplorer.showDynamicSubtestsInEditor": {
      "default": false,
      "description": "Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.testExplorer.showOutput": {
      "default": true,
      "description": "Open the test output terminal when a test run is started.",
      "scope": "window",
      "type": "boolean"
    },
    "go.testFlags": {
      "default": null,
      "description": "Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": [
        "array",
        "null"
      ]
    },
    "go.testOnSave": {
      "default": false,
      "description": "Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.testTags": {
      "default": null,
      "description": "The Go build tags to use for when running tests. If null, then buildTags will be used.",
      "scope": "resource",
      "type": [
        "string",
        "null"
      ]
    },
    "go.testTimeout": {
      "default": "30s",
      "description": "Specifies the timeout for go test in ParseDuration format.",
      "scope": "resource",
      "type": "string"
    },
    "go.toolsEnvVars": {
      "default": {},
      "description": "Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.",
      "scope": "resource",
      "type": "object"
    },
    "go.toolsGopath": {
      "default": null,
      "description": "Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.",
      "scope": "machine-overridable",
      "type": [
        "string",
        "null"
      ]
    },
    "go.toolsManagement.autoUpdate": {
      "default": false,
      "description": "Automatically update the tools used by the extension, without prompting the user.",
      "scope": "resource",
      "type": "boolean"
    },
    "go.toolsManagement.checkForUpdates": {
      "default": "proxy",
      "enum": [
        "proxy",
        "local",
        "off"
      ],
      "enumDescriptions": [
        "keeps notified of new releases by checking the Go module proxy (GOPROXY)",
        "checks only the minimum tools versions required by the extension",
        "completely disables version check (not recommended)"
      ],
      "markdownDescription": "Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on",
      "type": "string"
    },
    "go.toolsManagement.go": {
      "default": "",
      "description": "The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.",
      "scope": "machine-overridable",
      "type": "string"
    },
    "go.trace.server": {
      "default": "off",
      "description": "Trace the communication between VS Code and the Go language server.",
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "type": "string"
    },
    "go.useLanguageServer": {
      "default": true,
      "description": "Enable intellisense, code navigation, refactoring, formatting & diagnostics for Go. The features are powered by the Go language server \"gopls\".",
      "type": "boolean"
    },
    "go.vetFlags": {
      "default": [],
      "description": "Flags to pass to `go tool vet` (e.g. [\"-all\", \"-shadow\"]). Not applicable when using the language server's diagnostics.",
      "items": {
        "type": "string"
      },
      "scope": "resource",
      "type": "array"
    },
    "go.vetOnSave": {
      "default": "package",
      "description": "Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics.",
      "enum": [
        "package",
        "workspace",
        "off"
      ],
      "enumDescriptions": [
        "vet the current package on file saving",
        "vet all the packages in the current workspace root folder on file saving",
        "do not run vet automatically"
      ],
      "scope": "resource",
      "type": "string"
    },
    "gopls": {
      "markdownDescription": "Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.",
      "properties": {
        "build.allowImplicitNetworkAccess": {
          "default": false,
          "markdownDescription": "(Experimental) allowImplicitNetworkAccess disables GOPROXY=off, allowing implicit module\ndownloads rather than requiring user action. This option will eventually\nbe removed.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "build.buildFlags": {
          "default": [],
          "markdownDescription": "buildFlags is the set of flags passed on to the build system when invoked.\nIt is applied to queries like `go list`, which is used when discovering files.\nThe most common use is to set `-tags`.\n\nIf unspecified, values of `go.buildFlags, go.buildTags` will be propagated.\n",
          "scope": "resource",
          "type": "array"
        },
        "build.directoryFilters": {
          "default": [
            "-**/node_modules"
          ],
          "markdownDescription": "directoryFilters can be used to exclude unwanted directories from the\nworkspace. By default, all directories are included. Filters are an\noperator, `+` to include and `-` to exclude, followed by a path prefix\nrelative to the workspace folder. They are evaluated in order, and\nthe last filter that applies to a path controls whether it is included.\nThe path prefix can be empty, so an initial `-` excludes everything.\n\nDirectoryFilters also supports the `**` operator to match 0 or more directories.\n\nExamples:\n\nExclude node_modules at current depth: `-node_modules`\n\nExclude node_modules at any depth: `-**/node_modules`\n\nInclude only project_a: `-` (exclude everything), `+project_a`\n\nInclude only project_a, but not node_modules inside it: `-`, `+project_a`, `-project_a/node_modules`\n",
          "scope": "resource",
          "type": "array"
        },
        "build.env": {
          "markdownDescription": "env adds environment variables to external commands run by `gopls`, most notably `go list`.\n",
          "scope": "resource",
          "type": "object"
        },
        "build.expandWorkspaceToModule": {
          "default": true,
          "markdownDescription": "(Experimental) expandWorkspaceToModule determines which packages are considered\n\"workspace packages\" when the workspace is using modules.\n\nWorkspace packages affect the scope of workspace-wide operations. Notably,\ngopls diagnoses all packages considered to be part of the workspace after\nevery keystroke, so by setting \"ExpandWorkspaceToModule\" to false, and\nopening a nested workspace directory, you can reduce the amount of work\ngopls has to do to keep your workspace up to date.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "build.memoryMode": {
          "default": "",
          "markdownDescription": "(Experimental) obsolete, no effect\n",
          "scope": "resource",
          "type": "string"
        },
        "build.standaloneTags": {
          "default": [
            "ignore"
          ],
          "markdownDescription": "standaloneTags specifies a set of build constraints that identify\nindividual Go source files that make up the entire main package of an\nexecutable.\n\nA common example of standalone main files is the convention of using the\ndirective `//go:build ignore` to denote files that are not intended to be\nincluded in any package, for example because they are invoked directly by\nthe developer using `go run`.\n\nGopls considers a file to be a standalone main file if and only if it has\npackage name \"main\" and has a build directive of the exact form\n\"//go:build tag\" or \"// +build tag\", where tag is among the list of tags\nconfigured by this setting. Notably, if the build constraint is more\ncomplicated than a simple tag (such as the composite constraint\n`//go:build tag && go1.18`), the file is not considered to be a standalone\nmain file.\n\nThis setting is only supported when gopls is built with Go 1.16 or later.\n",
          "scope": "resource",
          "type": "array"
        },
        "build.templateExtensions": {
          "default": [],
          "markdownDescription": "templateExtensions gives the extensions of file names that are treateed\nas template files. (The extension\nis the part of the file name after the final dot.)\n",
          "scope": "resource",
          "type": "array"
        },
        "formatting.gofumpt": {
          "default": false,
          "markdownDescription": "gofumpt indicates if we should run gofumpt formatting.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "formatting.local": {
          "default": "",
          "markdownDescription": "local is the equivalent of the `goimports -local` flag, which puts\nimports beginning with this string after third-party packages. It should\nbe the prefix of the import path whose imports should be grouped\nseparately.\n",
          "scope": "resource",
          "type": "string"
        },
        "ui.codelenses": {
          "markdownDescription": "codelenses overrides the enabled/disabled state of each of gopls'\nsources of [Code Lenses](codelenses.md).\n\nExample Usage:\n\n```json5\n\"gopls\": {\n...\n  \"codelenses\": {\n    \"generate\": false,  // Don't show the `go generate` lens.\n    \"gc_details\": true  // Show a code lens toggling the display of gc's choices.\n  }\n...\n}\n```\n",
          "properties": {
            "gc_details": {
              "default": false,
              "markdownDescription": "`\"gc_details\"`: Toggle display of Go compiler optimization decisions\n\nThis codelens source causes the `package` declaration of\neach file to be annotated with a command to toggle the\nstate of the per-session variable that controls whether\noptimization decisions from the Go compiler (formerly known\nas \"gc\") should be displayed as diagnostics.\n\nOptimization decisions include:\n- whether a variable escapes, and how escape is inferred;\n- whether a nil-pointer check is implied or eliminated;\n- whether a function can be inlined.\n\nTODO(adonovan): this source is off by default because the\nannotation is annoying and because VS Code has a separate\n\"Toggle gc details\" command. Replace it with a Code Action\n(\"Source action...\").\n",
              "type": "boolean"
            },
            "generate": {
              "default": true,
              "markdownDescription": "`\"generate\"`: Run `go generate`\n\nThis codelens source annotates any `//go:generate` comments\nwith commands to run `go generate` in this directory, on\nall directories recursively beneath this one.\n\nSee [Generating code](https://go.dev/blog/generate) for\nmore details.\n",
              "type": "boolean"
            },
            "regenerate_cgo": {
              "default": true,
              "markdownDescription": "`\"regenerate_cgo\"`: Re-generate cgo declarations\n\nThis codelens source annotates an `import \"C\"` declaration\nwith a command to re-run the [cgo\ncommand](https://pkg.go.dev/cmd/cgo) to regenerate the\ncorresponding Go declarations.\n\nUse this after editing the C code in comments attached to\nthe import, or in C header files included by it.\n",
              "type": "boolean"
            },
            "run_govulncheck": {
              "default": false,
              "markdownDescription": "`\"run_govulncheck\"`: Run govulncheck\n\nThis codelens source annotates the `module` directive in a\ngo.mod file with a command to run Govulncheck.\n\n[Govulncheck](https://go.dev/blog/vuln) is a static\nanalysis tool that computes the set of functions reachable\nwithin your application, including dependencies;\nqueries a database of known security vulnerabilities; and\nreports any potential problems it finds.\n",
              "type": "boolean"
            },
            "test": {
              "default": false,
              "markdownDescription": "`\"test\"`: Run tests and benchmarks\n\nThis codelens source annotates each `Test` and `Benchmark`\nfunction in a `*_test.go` file with a command to run it.\n\nThis source is off by default because VS Code has\na client-side custom UI for testing, and because progress\nnotifications are not a great UX for streamed test output.\nSee:\n- golang/go#67400 for a discussion of this feature.\n- https://github.com/joaotavora/eglot/discussions/1402\n  for an alternative approach.\n",
              "type": "boolean"
            },
            "tidy": {
              "default": true,
              "markdownDescription": "`\"tidy\"`: Tidy go.mod file\n\nThis codelens source annotates the `module` directive in a\ngo.mod file with a command to run [`go mod\ntidy`](https://go.dev/ref/mod#go-mod-tidy), which ensures\nthat the go.mod file matches the source code in the module.\n",
              "type": "boolean"
            },
            "upgrade_dependency": {
              "default": true,
              "markdownDescription": "`\"upgrade_dependency\"`: Update dependencies\n\nThis codelens source annotates the `module` directive in a\ngo.mod file with commands to:\n\n- check for available upgrades,\n- upgrade direct dependencies, and\n- upgrade all dependencies transitively.\n",
              "type": "boolean"
            },
            "vendor": {
              "default": true,
              "markdownDescription": "`\"vendor\"`: Update vendor directory\n\nThis codelens source annotates the `module` directive in a\ngo.mod file with a command to run [`go mod\nvendor`](https://go.dev/ref/mod#go-mod-vendor), which\ncreates or updates the directory named `vendor` in the\nmodule root so that it contains an up-to-date copy of all\nnecessary package dependencies.\n",
              "type": "boolean"
            }
          },
          "scope": "resource",
          "type": "object"
        },
        "ui.completion.completeFunctionCalls": {
          "default": true,
          "markdownDescription": "completeFunctionCalls enables function call completion.\n\nWhen completing a statement, or when a function return type matches the\nexpected of the expression being completed, completion may suggest call\nexpressions (i.e. may include parentheses).\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.completion.completionBudget": {
          "default": "100ms",
          "markdownDescription": "(For Debugging) completionBudget is the soft latency goal for completion requests. Most\nrequests finish in a couple milliseconds, but in some cases deep\ncompletions can take much longer. As we use up our budget we\ndynamically reduce the search scope to ensure we return timely\nresults. Zero means unlimited.\n",
          "scope": "resource",
          "type": "string"
        },
        "ui.completion.experimentalPostfixCompletions": {
          "default": true,
          "markdownDescription": "(Experimental) experimentalPostfixCompletions enables artificial method snippets\nsuch as \"someSlice.sort!\".\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.completion.matcher": {
          "default": "Fuzzy",
          "enum": [
            "CaseInsensitive",
            "CaseSensitive",
            "Fuzzy"
          ],
          "markdownDescription": "(Advanced) matcher sets the algorithm that is used when calculating completion\ncandidates.\n",
          "markdownEnumDescriptions": [
            "",
            "",
            ""
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.completion.usePlaceholders": {
          "default": false,
          "markdownDescription": "placeholders enables placeholders for function parameters or struct\nfields in completion responses.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.diagnostic.analyses": {
          "markdownDescription": "analyses specify analyses that the user would like to enable or disable.\nA map of the names of analysis passes that should be enabled/disabled.\nA full list of analyzers that gopls uses can be found in\n[analyzers.md](https://github.com/golang/tools/blob/master/gopls/doc/analyzers.md).\n\nExample Usage:\n\n```json5\n...\n\"analyses\": {\n  \"unreachable\": false, // Disable the unreachable analyzer.\n  \"unusedvariable\": true  // Enable the unusedvariable analyzer.\n}\n...\n```\n",
          "properties": {
            "appends": {
              "default": true,
              "markdownDescription": "check for missing values after append\n\nThis checker reports calls to append that pass\nno values to be appended to the slice.\n\n\ts := []string{\"a\", \"b\", \"c\"}\n\t_ = append(s)\n\nSuch calls are always no-ops and often indicate an\nunderlying mistake.",
              "type": "boolean"
            },
            "asmdecl": {
              "default": true,
              "markdownDescription": "report mismatches between assembly files and Go declarations",
              "type": "boolean"
            },
            "assign": {
              "default": true,
              "markdownDescription": "check for useless assignments\n\nThis checker reports assignments of the form x = x or a[i] = a[i].\nThese are almost always useless, and even when they aren't they are\nusually a mistake.",
              "type": "boolean"
            },
            "atomic": {
              "default": true,
              "markdownDescription": "check for common mistakes using the sync/atomic package\n\nThe atomic checker looks for assignment statements of the form:\n\n\tx = atomic.AddUint64(&x, 1)\n\nwhich are not atomic.",
              "type": "boolean"
            },
            "atomicalign": {
              "default": true,
              "markdownDescription": "check for non-64-bits-aligned arguments to sync/atomic functions",
              "type": "boolean"
            },
            "bools": {
              "default": true,
              "markdownDescription": "check for common mistakes involving boolean operators",
              "type": "boolean"
            },
            "buildtag": {
              "default": true,
              "markdownDescription": "check //go:build and // +build directives",
              "type": "boolean"
            },
            "cgocall": {
              "default": true,
              "markdownDescription": "detect some violations of the cgo pointer passing rules\n\nCheck for invalid cgo pointer passing.\nThis looks for code that uses cgo to call C code passing values\nwhose types are almost always invalid according to the cgo pointer\nsharing rules.\nSpecifically, it warns about attempts to pass a Go chan, map, func,\nor slice to C, either directly, or via a pointer, array, or struct.",
              "type": "boolean"
            },
            "composites": {
              "default": true,
              "markdownDescription": "check for unkeyed composite literals\n\nThis analyzer reports a diagnostic for composite literals of struct\ntypes imported from another package that do not use the field-keyed\nsyntax. Such literals are fragile because the addition of a new field\n(even if unexported) to the struct will cause compilation to fail.\n\nAs an example,\n\n\terr = &net.DNSConfigError{err}\n\nshould be replaced by:\n\n\terr = &net.DNSConfigError{Err: err}\n",
              "type": "boolean"
            },
            "copylocks": {
              "default": true,
              "markdownDescription": "check for locks erroneously passed by value\n\nInadvertently copying a value containing a lock, such as sync.Mutex or\nsync.WaitGroup, may cause both copies to malfunction. Generally such\nvalues should be referred to through a pointer.",
              "type": "boolean"
            },
            "deepequalerrors": {
              "default": true,
              "markdownDescription": "check for calls of reflect.DeepEqual on error values\n\nThe deepequalerrors checker looks for calls of the form:\n\n    reflect.DeepEqual(err1, err2)\n\nwhere err1 and err2 are errors. Using reflect.DeepEqual to compare\nerrors is discouraged.",
              "type": "boolean"
            },
            "defers": {
              "default": true,
              "markdownDescription": "report common mistakes in defer statements\n\nThe defers analyzer reports a diagnostic when a defer statement would\nresult in a non-deferred call to time.Since, as experience has shown\nthat this is nearly always a mistake.\n\nFor example:\n\n\tstart := time.Now()\n\t...\n\tdefer recordLatency(time.Since(start)) // error: call to time.Since is not deferred\n\nThe correct code is:\n\n\tdefer func() { recordLatency(time.Since(start)) }()",
              "type": "boolean"
            },
            "deprecated": {
              "default": true,
              "markdownDescription": "check for use of deprecated identifiers\n\nThe deprecated analyzer looks for deprecated symbols and package\nimports.\n\nSee https://go.dev/wiki/Deprecated to learn about Go's convention\nfor documenting and signaling deprecated identifiers.",
              "type": "boolean"
            },
            "directive": {
              "default": true,
              "markdownDescription": "check Go toolchain directives such as //go:debug\n\nThis analyzer checks for problems with known Go toolchain directives\nin all Go source files in a package directory, even those excluded by\n//go:build constraints, and all non-Go source files too.\n\nFor //go:debug (see https://go.dev/doc/godebug), the analyzer checks\nthat the directives are placed only in Go source files, only above the\npackage comment, and only in package main or *_test.go files.\n\nSupport for other known directives may be added in the future.\n\nThis analyzer does not check //go:build, which is handled by the\nbuildtag analyzer.\n",
              "type": "boolean"
            },
            "embed": {
              "default": true,
              "markdownDescription": "check //go:embed directive usage\n\nThis analyzer checks that the embed package is imported if //go:embed\ndirectives are present, providing a suggested fix to add the import if\nit is missing.\n\nThis analyzer also checks that //go:embed directives precede the\ndeclaration of a single variable.",
              "type": "boolean"
            },
            "errorsas": {
              "default": true,
              "markdownDescription": "report passing non-pointer or non-error values to errors.As\n\nThe errorsas analysis reports calls to errors.As where the type\nof the second argument is not a pointer to a type implementing error.",
              "type": "boolean"
            },
            "fieldalignment": {
              "default": false,
              "markdownDescription": "find structs that would use less memory if their fields were sorted\n\nThis analyzer find structs that can be rearranged to use less memory, and provides\na suggested edit with the most compact order.\n\nNote that there are two different diagnostics reported. One checks struct size,\nand the other reports \"pointer bytes\" used. Pointer bytes is how many bytes of the\nobject that the garbage collector has to potentially scan for pointers, for example:\n\n\tstruct { uint32; string }\n\nhave 16 pointer bytes because the garbage collector has to scan up through the string's\ninner pointer.\n\n\tstruct { string; *uint32 }\n\nhas 24 pointer bytes because it has to scan further through the *uint32.\n\n\tstruct { string; uint32 }\n\nhas 8 because it can stop immediately after the string pointer.\n\nBe aware that the most compact order is not always the most efficient.\nIn rare cases it may cause two variables each updated by its own goroutine\nto occupy the same CPU cache line, inducing a form of memory contention\nknown as \"false sharing\" that slows down both goroutines.\n",
              "type": "boolean"
            },
            "fillreturns": {
              "default": true,
              "markdownDescription": "suggest fixes for errors due to an incorrect number of return values\n\nThis checker provides suggested fixes for type errors of the\ntype \"wrong number of return values (want %d, got %d)\". For example:\n\n\tfunc m() (int, string, *bool, error) {\n\t\treturn\n\t}\n\nwill turn into\n\n\tfunc m() (int, string, *bool, error) {\n\t\treturn 0, \"\", nil, nil\n\t}\n\nThis functionality is similar to https://github.com/sqs/goreturns.",
              "type": "boolean"
            },
            "framepointer": {
              "default": true,
              "markdownDescription": "report assembly that clobbers the frame pointer before saving it",
              "type": "boolean"
            },
            "httpresponse": {
              "default": true,
              "markdownDescription": "check for mistakes using HTTP responses\n\nA common mistake when using the net/http package is to defer a function\ncall to close the http.Response Body before checking the error that\ndetermines whether the response is valid:\n\n\tresp, err := http.Head(url)\n\tdefer resp.Body.Close()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// (defer statement belongs here)\n\nThis checker helps uncover latent nil dereference bugs by reporting a\ndiagnostic for such mistakes.",
              "type": "boolean"
            },
            "ifaceassert": {
              "default": true,
              "markdownDescription": "detect impossible interface-to-interface type assertions\n\nThis checker flags type assertions v.(T) and corresponding type-switch cases\nin which the static type V of v is an interface that cannot possibly implement\nthe target interface T. This occurs when V and T contain methods with the same\nname but different signatures. Example:\n\n\tvar v interface {\n\t\tRead()\n\t}\n\t_ = v.(io.Reader)\n\nThe Read method in v has a different signature than the Read method in\nio.Reader, so this assertion cannot succeed.",
              "type": "boolean"
            },
            "infertypeargs": {
              "default": true,
              "markdownDescription": "check for unnecessary type arguments in call expressions\n\nExplicit type arguments may be omitted from call expressions if they can be\ninferred from function arguments, or from other type arguments:\n\n\tfunc f[T any](T) {}\n\t\n\tfunc _() {\n\t\tf[string](\"foo\") // string could be inferred\n\t}\n",
              "type": "boolean"
            },
            "loopclosure": {
              "default": true,
              "markdownDescription": "check references to loop variables from within nested functions\n\nThis analyzer reports places where a function literal references the\niteration variable of an enclosing loop, and the loop calls the function\nin such a way (e.g. with go or defer) that it may outlive the loop\niteration and possibly observe the wrong value of the variable.\n\nNote: An iteration variable can only outlive a loop iteration in Go versions <=1.21.\nIn Go 1.22 and later, the loop variable lifetimes changed to create a new\niteration variable per loop iteration. (See go.dev/issue/60078.)\n\nIn this example, all the deferred functions run after the loop has\ncompleted, so all observe the final value of v [<go1.22].\n\n\tfor _, v := range list {\n\t    defer func() {\n\t        use(v) // incorrect\n\t    }()\n\t}\n\nOne fix is to create a new variable for each iteration of the loop:\n\n\tfor _, v := range list {\n\t    v := v // new var per iteration\n\t    defer func() {\n\t        use(v) // ok\n\t    }()\n\t}\n\nAfter Go version 1.22, the previous two for loops are equivalent\nand both are correct.\n\nThe next example uses a go statement and has a similar problem [<go1.22].\nIn addition, it has a data race because the loop updates v\nconcurrent with the goroutines accessing it.\n\n\tfor _, v := range elem {\n\t    go func() {\n\t        use(v)  // incorrect, and a data race\n\t    }()\n\t}\n\nA fix is the same as before. The checker also reports problems\nin goroutines started by golang.org/x/sync/errgroup.Group.\nA hard-to-spot variant of this form is common in parallel tests:\n\n\tfunc Test(t *testing.T) {\n\t    for _, test := range tests {\n\t        t.Run(test.name, func(t *testing.T) {\n\t            t.Parallel()\n\t            use(test) // incorrect, and a data race\n\t        })\n\t    }\n\t}\n\nThe t.Parallel() call causes the rest of the function to execute\nconcurrent with the loop [<go1.22].\n\nThe analyzer reports references only in the last statement,\nas it is not deep enough to understand the effects of subsequent\nstatements that might render the reference benign.\n(\"Last statement\" is defined recursively in compound\nstatements such as if, switch, and select.)\n\nSee: https://golang.org/doc/go_faq.html#closures_and_goroutines",
              "type": "boolean"
            },
            "lostcancel": {
              "default": true,
              "markdownDescription": "check cancel func returned by context.WithCancel is called\n\nThe cancellation function returned by context.WithCancel, WithTimeout,\nand WithDeadline must be called or the new context will remain live\nuntil its parent context is cancelled.\n(The background context is never cancelled.)",
              "type": "boolean"
            },
            "nilfunc": {
              "default": true,
              "markdownDescription": "check for useless comparisons between functions and nil\n\nA useless comparison is one like f == nil as opposed to f() == nil.",
              "type": "boolean"
            },
            "nilness": {
              "default": true,
              "markdownDescription": "check for redundant or impossible nil comparisons\n\nThe nilness checker inspects the control-flow graph of each function in\na package and reports nil pointer dereferences, degenerate nil\npointers, and panics with nil values. A degenerate comparison is of the form\nx==nil or x!=nil where x is statically known to be nil or non-nil. These are\noften a mistake, especially in control flow related to errors. Panics with nil\nvalues are checked because they are not detectable by\n\n\tif r := recover(); r != nil {\n\nThis check reports conditions such as:\n\n\tif f == nil { // impossible condition (f is a function)\n\t}\n\nand:\n\n\tp := &v\n\t...\n\tif p != nil { // tautological condition\n\t}\n\nand:\n\n\tif p == nil {\n\t\tprint(*p) // nil dereference\n\t}\n\nand:\n\n\tif p == nil {\n\t\tpanic(p)\n\t}\n\nSometimes the control flow may be quite complex, making bugs hard\nto spot. In the example below, the err.Error expression is\nguaranteed to panic because, after the first return, err must be\nnil. The intervening loop is just a distraction.\n\n\t...\n\terr := g.Wait()\n\tif err != nil {\n\t\treturn err\n\t}\n\tpartialSuccess := false\n\tfor _, err := range errs {\n\t\tif err == nil {\n\t\t\tpartialSuccess = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif partialSuccess {\n\t\treportStatus(StatusMessage{\n\t\t\tCode:   code.ERROR,\n\t\t\tDetail: err.Error(), // \"nil dereference in dynamic method call\"\n\t\t})\n\t\treturn nil\n\t}\n\n...",
              "type": "boolean"
            },
            "nonewvars": {
              "default": true,
              "markdownDescription": "suggested fixes for \"no new vars on left side of :=\"\n\nThis checker provides suggested fixes for type errors of the\ntype \"no new vars on left side of :=\". For example:\n\n\tz := 1\n\tz := 2\n\nwill turn into\n\n\tz := 1\n\tz = 2",
              "type": "boolean"
            },
            "noresultvalues": {
              "default": true,
              "markdownDescription": "suggested fixes for unexpected return values\n\nThis checker provides suggested fixes for type errors of the\ntype \"no result values expected\" or \"too many return values\".\nFor example:\n\n\tfunc z() { return nil }\n\nwill turn into\n\n\tfunc z() { return }",
              "type": "boolean"
            },
            "printf": {
              "default": true,
              "markdownDescription": "check consistency of Printf format strings and arguments\n\nThe check applies to calls of the formatting functions such as\n[fmt.Printf] and [fmt.Sprintf], as well as any detected wrappers of\nthose functions such as [log.Printf]. It reports a variety of\nmistakes such as syntax errors in the format string and mismatches\n(of number and type) between the verbs and their arguments.\n\nSee the documentation of the fmt package for the complete set of\nformat operators and their operand types.",
              "type": "boolean"
            },
            "shadow": {
              "default": false,
              "markdownDescription": "check for possible unintended shadowing of variables\n\nThis analyzer check for shadowed variables.\nA shadowed variable is a variable declared in an inner scope\nwith the same name and type as a variable in an outer scope,\nand where the outer variable is mentioned after the inner one\nis declared.\n\n(This definition can be refined; the module generates too many\nfalse positives and is not yet enabled by default.)\n\nFor example:\n\n\tfunc BadRead(f *os.File, buf []byte) error {\n\t\tvar err error\n\t\tfor {\n\t\t\tn, err := f.Read(buf) // shadows the function variable 'err'\n\t\t\tif err != nil {\n\t\t\t\tbreak // causes return of wrong value\n\t\t\t}\n\t\t\tfoo(buf)\n\t\t}\n\t\treturn err\n\t}",
              "type": "boolean"
            },
            "shift": {
              "default": true,
              "markdownDescription": "check for shifts that equal or exceed the width of the integer",
              "type": "boolean"
            },
            "sigchanyzer": {
              "default": true,
              "markdownDescription": "check for unbuffered channel of os.Signal\n\nThis checker reports call expression of the form\n\n\tsignal.Notify(c <-chan os.Signal, sig ...os.Signal),\n\nwhere c is an unbuffered channel, which can be at risk of missing the signal.",
              "type": "boolean"
            },
            "simplifycompositelit": {
              "default": true,
              "markdownDescription": "check for composite literal simplifications\n\nAn array, slice, or map composite literal of the form:\n\n\t[]T{T{}, T{}}\n\nwill be simplified to:\n\n\t[]T{{}, {}}\n\nThis is one of the simplifications that \"gofmt -s\" applies.",
              "type": "boolean"
            },
            "simplifyrange": {
              "default": true,
              "markdownDescription": "check for range statement simplifications\n\nA range of the form:\n\n\tfor x, _ = range v {...}\n\nwill be simplified to:\n\n\tfor x = range v {...}\n\nA range of the form:\n\n\tfor _ = range v {...}\n\nwill be simplified to:\n\n\tfor range v {...}\n\nThis is one of the simplifications that \"gofmt -s\" applies.",
              "type": "boolean"
            },
            "simplifyslice": {
              "default": true,
              "markdownDescription": "check for slice simplifications\n\nA slice expression of the form:\n\n\ts[a:len(s)]\n\nwill be simplified to:\n\n\ts[a:]\n\nThis is one of the simplifications that \"gofmt -s\" applies.",
              "type": "boolean"
            },
            "slog": {
              "default": true,
              "markdownDescription": "check for invalid structured logging calls\n\nThe slog checker looks for calls to functions from the log/slog\npackage that take alternating key-value pairs. It reports calls\nwhere an argument in a key position is neither a string nor a\nslog.Attr, and where a final key is missing its value.\nFor example,it would report\n\n\tslog.Warn(\"message\", 11, \"k\") // slog.Warn arg \"11\" should be a string or a slog.Attr\n\nand\n\n\tslog.Info(\"message\", \"k1\", v1, \"k2\") // call to slog.Info missing a final value",
              "type": "boolean"
            },
            "sortslice": {
              "default": true,
              "markdownDescription": "check the argument type of sort.Slice\n\nsort.Slice requires an argument of a slice type. Check that\nthe interface{} value passed to sort.Slice is actually a slice.",
              "type": "boolean"
            },
            "stdmethods": {
              "default": true,
              "markdownDescription": "check signature of methods of well-known interfaces\n\nSometimes a type may be intended to satisfy an interface but may fail to\ndo so because of a mistake in its method signature.\nFor example, the result of this WriteTo method should be (int64, error),\nnot error, to satisfy io.WriterTo:\n\n\ttype myWriterTo struct{...}\n\tfunc (myWriterTo) WriteTo(w io.Writer) error { ... }\n\nThis check ensures that each method whose name matches one of several\nwell-known interface methods from the standard library has the correct\nsignature for that interface.\n\nChecked method names include:\n\n\tFormat GobEncode GobDecode MarshalJSON MarshalXML\n\tPeek ReadByte ReadFrom ReadRune Scan Seek\n\tUnmarshalJSON UnreadByte UnreadRune WriteByte\n\tWriteTo",
              "type": "boolean"
            },
            "stdversion": {
              "default": true,
              "markdownDescription": "report uses of too-new standard library symbols\n\nThe stdversion analyzer reports references to symbols in the standard\nlibrary that were introduced by a Go release higher than the one in\nforce in the referring file. (Recall that the file's Go version is\ndefined by the 'go' directive its module's go.mod file, or by a\n\"//go:build go1.X\" build tag at the top of the file.)\n\nThe analyzer does not report a diagnostic for a reference to a \"too\nnew\" field or method of a type that is itself \"too new\", as this may\nhave false positives, for example if fields or methods are accessed\nthrough a type alias that is guarded by a Go version constraint.\n",
              "type": "boolean"
            },
            "stringintconv": {
              "default": true,
              "markdownDescription": "check for string(int) conversions\n\nThis checker flags conversions of the form string(x) where x is an integer\n(but not byte or rune) type. Such conversions are discouraged because they\nreturn the UTF-8 representation of the Unicode code point x, and not a decimal\nstring representation of x as one might expect. Furthermore, if x denotes an\ninvalid code point, the conversion cannot be statically rejected.\n\nFor conversions that intend on using the code point, consider replacing them\nwith string(rune(x)). Otherwise, strconv.Itoa and its equivalents return the\nstring representation of the value in the desired base.",
              "type": "boolean"
            },
            "structtag": {
              "default": true,
              "markdownDescription": "check that struct field tags conform to reflect.StructTag.Get\n\nAlso report certain struct tags (json, xml) used with unexported fields.",
              "type": "boolean"
            },
            "stubmethods": {
              "default": true,
              "markdownDescription": "detect missing methods and fix with stub implementations\n\nThis analyzer detects type-checking errors due to missing methods\nin assignments from concrete types to interface types, and offers\na suggested fix that will create a set of stub methods so that\nthe concrete type satisfies the interface.\n\nFor example, this function will not compile because the value\nNegativeErr{} does not implement the \"error\" interface:\n\n\tfunc sqrt(x float64) (float64, error) {\n\t\tif x < 0 {\n\t\t\treturn 0, NegativeErr{} // error: missing method\n\t\t}\n\t\t...\n\t}\n\n\ttype NegativeErr struct{}\n\nThis analyzer will suggest a fix to declare this method:\n\n\t// Error implements error.Error.\n\tfunc (NegativeErr) Error() string {\n\t\tpanic(\"unimplemented\")\n\t}\n\n(At least, it appears to behave that way, but technically it\ndoesn't use the SuggestedFix mechanism and the stub is created by\nlogic in gopls's golang.stub function.)",
              "type": "boolean"
            },
            "testinggoroutine": {
              "default": true,
              "markdownDescription": "report calls to (*testing.T).Fatal from goroutines started by a test\n\nFunctions that abruptly terminate a test, such as the Fatal, Fatalf, FailNow, and\nSkip{,f,Now} methods of *testing.T, must be called from the test goroutine itself.\nThis checker detects calls to these functions that occur within a goroutine\nstarted by the test. For example:\n\n\tfunc TestFoo(t *testing.T) {\n\t    go func() {\n\t        t.Fatal(\"oops\") // error: (*T).Fatal called from non-test goroutine\n\t    }()\n\t}",
              "type": "boolean"
            },
            "tests": {
              "default": true,
              "markdownDescription": "check for common mistaken usages of tests and examples\n\nThe tests checker walks Test, Benchmark, Fuzzing and Example functions checking\nmalformed names, wrong signatures and examples documenting non-existent\nidentifiers.\n\nPlease see the documentation for package testing in golang.org/pkg/testing\nfor the conventions that are enforced for Tests, Benchmarks, and Examples.",
              "type": "boolean"
            },
            "timeformat": {
              "default": true,
              "markdownDescription": "check for calls of (time.Time).Format or time.Parse with 2006-02-01\n\nThe timeformat checker looks for time formats with the 2006-02-01 (yyyy-dd-mm)\nformat. Internationally, \"yyyy-dd-mm\" does not occur in common calendar date\nstandards, and so it is more likely that 2006-01-02 (yyyy-mm-dd) was intended.",
              "type": "boolean"
            },
            "undeclaredname": {
              "default": true,
              "markdownDescription": "suggested fixes for \"undeclared name: <>\"\n\nThis checker provides suggested fixes for type errors of the\ntype \"undeclared name: <>\". It will either insert a new statement,\nsuch as:\n\n\t<> :=\n\nor a new function declaration, such as:\n\n\tfunc <>(inferred parameters) {\n\t\tpanic(\"implement me!\")\n\t}",
              "type": "boolean"
            },
            "unmarshal": {
              "default": true,
              "markdownDescription": "report passing non-pointer or non-interface values to unmarshal\n\nThe unmarshal analysis reports calls to functions such as json.Unmarshal\nin which the argument type is not a pointer or an interface.",
              "type": "boolean"
            },
            "unreachable": {
              "default": true,
              "markdownDescription": "check for unreachable code\n\nThe unreachable analyzer finds statements that execution can never reach\nbecause they are preceded by an return statement, a call to panic, an\ninfinite loop, or similar constructs.",
              "type": "boolean"
            },
            "unsafeptr": {
              "default": true,
              "markdownDescription": "check for invalid conversions of uintptr to unsafe.Pointer\n\nThe unsafeptr analyzer reports likely incorrect uses of unsafe.Pointer\nto convert integers to pointers. A conversion from uintptr to\nunsafe.Pointer is invalid if it implies that there is a uintptr-typed\nword in memory that holds a pointer value, because that word will be\ninvisible to stack copying and to the garbage collector.",
              "type": "boolean"
            },
            "unusedparams": {
              "default": true,
              "markdownDescription": "check for unused parameters of functions\n\nThe unusedparams analyzer checks functions to see if there are\nany parameters that are not being used.\n\nTo ensure soundness, it ignores:\n  - \"address-taken\" functions, that is, functions that are used as\n    a value rather than being called directly; their signatures may\n    be required to conform to a func type.\n  - exported functions or methods, since they may be address-taken\n    in another package.\n  - unexported methods whose name matches an interface method\n    declared in the same package, since the method's signature\n    may be required to conform to the interface type.\n  - functions with empty bodies, or containing just a call to panic.\n  - parameters that are unnamed, or named \"_\", the blank identifier.\n\nThe analyzer suggests a fix of replacing the parameter name by \"_\",\nbut in such cases a deeper fix can be obtained by invoking the\n\"Refactor: remove unused parameter\" code action, which will\neliminate the parameter entirely, along with all corresponding\narguments at call sites, while taking care to preserve any side\neffects in the argument expressions; see\nhttps://github.com/golang/tools/releases/tag/gopls%2Fv0.14.",
              "type": "boolean"
            },
            "unusedresult": {
              "default": true,
              "markdownDescription": "check for unused results of calls to some functions\n\nSome functions like fmt.Errorf return a result and have no side\neffects, so it is always a mistake to discard the result. Other\nfunctions may return an error that must not be ignored, or a cleanup\noperation that must be called. This analyzer reports calls to\nfunctions like these when the result of the call is ignored.\n\nThe set of functions may be controlled using flags.",
              "type": "boolean"
            },
            "unusedvariable": {
              "default": false,
              "markdownDescription": "check for unused variables and suggest fixes",
              "type": "boolean"
            },
            "unusedwrite": {
              "default": true,
              "markdownDescription": "checks for unused writes\n\nThe analyzer reports instances of writes to struct fields and\narrays that are never read. Specifically, when a struct object\nor an array is copied, its elements are copied implicitly by\nthe compiler, and any element write to this copy does nothing\nwith the original object.\n\nFor example:\n\n\ttype T struct { x int }\n\n\tfunc f(input []T) {\n\t\tfor i, v := range input {  // v is a copy\n\t\t\tv.x = i  // unused write to field x\n\t\t}\n\t}\n\nAnother example is about non-pointer receiver:\n\n\ttype T struct { x int }\n\n\tfunc (t T) f() {  // t is a copy\n\t\tt.x = i  // unused write to field x\n\t}",
              "type": "boolean"
            },
            "useany": {
              "default": false,
              "markdownDescription": "check for constraints that could be simplified to \"any\"",
              "type": "boolean"
            }
          },
          "scope": "resource",
          "type": "object"
        },
        "ui.diagnostic.analysisProgressReporting": {
          "default": true,
          "markdownDescription": "analysisProgressReporting controls whether gopls sends progress\nnotifications when construction of its index of analysis facts is taking a\nlong time. Cancelling these notifications will cancel the indexing task,\nthough it will restart after the next change in the workspace.\n\nWhen a package is opened for the first time and heavyweight analyses such as\nstaticcheck are enabled, it can take a while to construct the index of\nanalysis facts for all its dependencies. The index is cached in the\nfilesystem, so subsequent analysis should be faster.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.diagnostic.annotations": {
          "markdownDescription": "(Experimental) annotations specifies the various kinds of optimization diagnostics\nthat should be reported by the gc_details command.\n",
          "properties": {
            "bounds": {
              "default": true,
              "markdownDescription": "`\"bounds\"` controls bounds checking diagnostics.\n",
              "type": "boolean"
            },
            "escape": {
              "default": true,
              "markdownDescription": "`\"escape\"` controls diagnostics about escape choices.\n",
              "type": "boolean"
            },
            "inline": {
              "default": true,
              "markdownDescription": "`\"inline\"` controls diagnostics about inlining choices.\n",
              "type": "boolean"
            },
            "nil": {
              "default": true,
              "markdownDescription": "`\"nil\"` controls nil checks.\n",
              "type": "boolean"
            }
          },
          "scope": "resource",
          "type": "object"
        },
        "ui.diagnostic.diagnosticsDelay": {
          "default": "1s",
          "markdownDescription": "(Advanced) diagnosticsDelay controls the amount of time that gopls waits\nafter the most recent file modification before computing deep diagnostics.\nSimple diagnostics (parsing and type-checking) are always run immediately\non recently modified packages.\n\nThis option must be set to a valid duration string, for example `\"250ms\"`.\n",
          "scope": "resource",
          "type": "string"
        },
        "ui.diagnostic.diagnosticsTrigger": {
          "default": "Edit",
          "enum": [
            "Edit",
            "Save"
          ],
          "markdownDescription": "(Experimental) diagnosticsTrigger controls when to run diagnostics.\n",
          "markdownEnumDescriptions": [
            "`\"Edit\"`: Trigger diagnostics on file edit and save. (default)\n",
            "`\"Save\"`: Trigger diagnostics only on file save. Events like initial workspace load\nor configuration change will still trigger diagnostics.\n"
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.diagnostic.staticcheck": {
          "default": false,
          "markdownDescription": "(Experimental) staticcheck enables additional analyses from staticcheck.io.\nThese analyses are documented on\n[Staticcheck's website](https://staticcheck.io/docs/checks/).\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.documentation.hoverKind": {
          "default": "FullDocumentation",
          "enum": [
            "FullDocumentation",
            "NoDocumentation",
            "SingleLine",
            "Structured",
            "SynopsisDocumentation"
          ],
          "markdownDescription": "hoverKind controls the information that appears in the hover text.\nSingleLine and Structured are intended for use only by authors of editor plugins.\n",
          "markdownEnumDescriptions": [
            "",
            "",
            "",
            "`\"Structured\"` is an experimental setting that returns a structured hover format.\nThis format separates the signature from the documentation, so that the client\ncan do more manipulation of these fields.\n\nThis should only be used by clients that support this behavior.\n",
            ""
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.documentation.linkTarget": {
          "default": "pkg.go.dev",
          "markdownDescription": "linkTarget controls where documentation links go.\nIt might be one of:\n\n* `\"godoc.org\"`\n* `\"pkg.go.dev\"`\n\nIf company chooses to use its own `godoc.org`, its address can be used as well.\n\nModules matching the GOPRIVATE environment variable will not have\ndocumentation links in hover.\n",
          "scope": "resource",
          "type": "string"
        },
        "ui.documentation.linksInHover": {
          "default": true,
          "markdownDescription": "linksInHover controls the presence of documentation links\nin hover markdown.\n\nIts legal values are:\n- `false`, for no links;\n- `true`, for links to the `linkTarget` domain; or\n- `\"gopls\"`, for links to gopls' internal documentation viewer.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.navigation.importShortcut": {
          "default": "Both",
          "enum": [
            "Both",
            "Definition",
            "Link"
          ],
          "markdownDescription": "importShortcut specifies whether import statements should link to\ndocumentation or go to definitions.\n",
          "markdownEnumDescriptions": [
            "",
            "",
            ""
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.navigation.symbolMatcher": {
          "default": "FastFuzzy",
          "enum": [
            "CaseInsensitive",
            "CaseSensitive",
            "FastFuzzy",
            "Fuzzy"
          ],
          "markdownDescription": "(Advanced) symbolMatcher sets the algorithm that is used when finding workspace symbols.\n",
          "markdownEnumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.navigation.symbolScope": {
          "default": "all",
          "enum": [
            "all",
            "workspace"
          ],
          "markdownDescription": "symbolScope controls which packages are searched for workspace/symbol\nrequests. When the scope is \"workspace\", gopls searches only workspace\npackages. When the scope is \"all\", gopls searches all loaded packages,\nincluding dependencies and the standard library.\n",
          "markdownEnumDescriptions": [
            "`\"all\"` matches symbols in any loaded package, including\ndependencies.\n",
            "`\"workspace\"` matches symbols in workspace packages only.\n"
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.navigation.symbolStyle": {
          "default": "Dynamic",
          "enum": [
            "Dynamic",
            "Full",
            "Package"
          ],
          "markdownDescription": "(Advanced) symbolStyle controls how symbols are qualified in symbol responses.\n\nExample Usage:\n\n```json5\n\"gopls\": {\n...\n  \"symbolStyle\": \"Dynamic\",\n...\n}\n```\n",
          "markdownEnumDescriptions": [
            "`\"Dynamic\"` uses whichever qualifier results in the highest scoring\nmatch for the given symbol query. Here a \"qualifier\" is any \"/\" or \".\"\ndelimited suffix of the fully qualified symbol. i.e. \"to/pkg.Foo.Field\" or\njust \"Foo.Field\".\n",
            "`\"Full\"` is fully qualified symbols, i.e.\n\"path/to/pkg.Foo.Field\".\n",
            "`\"Package\"` is package qualified symbols i.e.\n\"pkg.Foo.Field\".\n"
          ],
          "scope": "resource",
          "type": "string"
        },
        "ui.noSemanticNumber": {
          "default": false,
          "markdownDescription": "(Experimental) noSemanticNumber  turns off the sending of the semantic token 'number'\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.noSemanticString": {
          "default": false,
          "markdownDescription": "(Experimental) noSemanticString turns off the sending of the semantic token 'string'\n",
          "scope": "resource",
          "type": "boolean"
        },
        "ui.semanticTokens": {
          "default": false,
          "markdownDescription": "(Experimental) semanticTokens controls whether the LSP server will send\nsemantic tokens to the client.\n",
          "scope": "resource",
          "type": "boolean"
        },
        "verboseOutput": {
          "default": false,
          "markdownDescription": "(For Debugging) verboseOutput enables additional debug logging.\n",
          "scope": "resource",
          "type": "boolean"
        }
      },
      "scope": "resource",
      "type": "object"
    }
  }
}
